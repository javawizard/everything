THIS IS A FEW NOTES INTENDED FOR DEVELOPERS, AND MOSTLY INTENDED FOR ME (ALEX)



tools have an ObjectHierarchy that they can use to store data. it has 2 root folders. it is not possible to add or remove folders
from the root of an object hierarchy, meaning that you can only add and remove folders and files from the 2 root folders.
these folders are called local and sync. any data put into local is for loca use only, IE it is not synchronized. a user's
preferences for the way the tool displays might be stored in here. the sync folder stores data that should be synchronized.
folders in an object hierarchy can also be locked from synchronization. it is an error to lock a folder in the local folder,
because the local folder doesn't synchronize at all. anyway, locking a folder in the sync folder (or, for that matter, any
subfolder) prevents it from being synchronized, IE to the synchronizer it appears as though it isn't changing at all, and
no changes from other computers will be synchronized into it. it can be unlocked at a later time. this is used for when you need
to add a folder and a whole bunch of files under it and would like them to all be synchronized at the same time. let's consider an example:
suppose you have a document tool that stores each document as a folder. under this folder there are 4 files, which are creator, lastModifiedDate,
createdDate, and content. let's say that the user has clicked a button to create a new document. now imagine that we aren't using synchronization
locking. we create the folder, and add creator and lastModifiedDate. at this point, InTouch 3 detects that new files have been added and so
synchronizes the object hierarchy. other computers using this tool go to read the folder for the new document, and find 2 files missing,
probably resulting in an exception. if we use synchronization, this will not happen. we can synchronize the folder that stores all documents,
create a new folder under it (representing our new document), and safely add the 4 files mentioned above. then, once the files have been added,
we can unlock the documents folder, thereby allowing synchronization to continue. 
occasionally, the program might crash while a folder is locked. it is not safe to leave the folder locked, because it may stay so forever
and cause problems. similarly, it is not safe to unlock the folder, because most likely the contents of the folder are in a corrupt state.
because of this, there is a method on ObjectHierarchy that returns all folders currently locked. there is also a method that unlocks all
folders in the object hierarchy. it is considered good practice for an application to check all folders marked as locked when the tool is loaded
to make sure that they are not corrupt, and then unlock them.
tools can also send messages to the same tool on someone else's computer, using a protected method in the WorkspaceTool class.
tools can also obtain a list of other users that are members of the workspace, and tools can obtain a list of who is online.
tools can also see if the local computer is currently online.
there is also a protected method in WorkspaceTool that tools can use to force an immediate synchronization.
generally, synchronization occures 2 seconds after the object hierarchy is modified (to give time for more modifications), whenever another user
signes on, once when the local computer connects to the internet, after a synchronization with another computer where
changes were received (as opposed to a synchronization where changes were only sent or no changes were found at all), and once every 5 minutes. 

synchronization occurs only between 2 computers. this means that if there are, say, 5 computers in a workspace, and computer 1 modifies some info,
it will synchronize with computers 2, 3, 4, and 5 seperately. it may NOT do these synchronizations at the same time. furthermore, no more than 2
computers in a workspace can be synchronizing at the same time. for example, if computers 1 and 4 modify some data, computer 1 should synchronize with
computers 2, 3, 4 (receiving computer 4's changes), 5, then computer 4 should synchronize with computers 1 (again), 2, 3, and 5, computer 1 should
(again) synchronize with computers 2, 3, and 5, and computer 4 should (again) synchronize with computers 2, 3, and 5. this is in accordance with the rule
specified above, that states that synchronization should occur after changes were successfully received from another computer.

the creator of the workspace manages which users have access to the workspace. currently, all users can modify the workspace, there
is no "read-only" permission. individual tools themselves can impose such restrictions, but they can be easily circumvented by an
experienced programmer.

if a conflict is detected when synchronizing (IE a file has been changed on 2 computers before they had synchronized),
the file is locked on both computers and marked as a conflict. there are methods in ObjectHierarchy
for checking if a file has been marked as a conflicting file. the file should be unlocked when the conflict has been resolved
(which will also result in clearing the conflict status) and then it will be synchronized. InTouch 3 stores the date (according to
the server) that it last synchronized with each computer in the workspace. it also stores the date that a file was last modified.
this inherently tells a computer if the file has been changed since the last synchronization with another given computer. if,
when this computer synchronizes with another computer, it finds that a file has been modified since it last synchronized and the
corresponding file on the other computer has been modified since it's last synchronization with this computer, then a conflit has been detected.

when a file is deleted on one computer, it is deleted on all other computers, upon synchronization, without question regarding the conflict status
or the lock status of the file on the remote computer. this can have potentially disastrous results, and so methods are provided for backing
up the sync folder to subfolders of the local folder (since the local folder is not synchronized). these methods should ALWAYS be used when
the tool holds important data, but may not need to be used for tools that store unimportant data. for example, a document tool or issue tracker
should make use of these methods, but short game methods (such as board games) would usually not.

REVISION 2007.12.02 1:08 AM:

No synchronization support will be added for now. When it does come round, it will be as part of a SynchronizedTool class
that extends WorkspaceTool.

Anyway, as part of user metadata there are 2 important properties. those are workspaces_owner and workspaces_participant.
those are comma-seperated lists of workspace ids. for each workspace in workspaces_owner, there is a property
called workspace_IDOFWORKSPACE_users which is a comma-seperated list of users that can access the workspace.
participants in a workspace should refuse to accept messages from a user not in this list. there is also
a property called workspace_IDOFWORKSPACE_type which is the registered type of the workspace, and the
version. more on this later.
note that the id of a workspace starts with the user that created it, then a hyphen, then some numbers.
this means that for a given workspace id, you can know which user has it's user list as a user metadata property.

currently, only the creator of a workspace can add users to the workspace. furthermore, if the creator of a workspace deletes the
workspace, it will be deleted for all users. however, if a participant deletes the workspace, it is just deleted off of their computer.

in the storage root, there is a folder called workspaces or something like that. there are 2 folders under that, which are
mine and other. under mine, there is 1 folder for each workspace that is created by this user, with it's name being the workspace's id.
same for the folders under other, but these are workspaces that this user participates in, but did not create.
when you click on import a workspace, you are asked for the workspace's id. it then checks to see if you have permission
to access this workspace, by finding the user that created it (see above for how to extract that from the id),
reading that user's metadata, and seeing if this user is on the workspace user list. if not, a message is shown to the user
saying that they do not have permission to access the workspace at this time. if this user is on the workspace participant list,
it checks to see if the workspace type is present on this computer. if not, it shows an error message to this user. if the type does
exist on this computer, then it creates a new folder under "other", with
the workspace's id as the name of the folder. it then creates a folder under that called
datastore, which functions as the workspace's local data store. it then creates a file called type which is the registered type and
version of the workspace, as obtained by the remote computer. it then instantiates the type implementation of WorkspaceTool, then
calling itwInitialize(), passing the folder specified in, then instructs the launchbar to refresh.
 it then informs the user that the workspace has been successfully imported,
and shows the custom message specified in the workspace configuration file. for file workspaces, this might tell the user
that they need to open the workspace and choose a local folder that should be used. for tool workspaces, this might tell the user
that their tools will be synchronized when another user comes online. 

the workspace is named "unnamed workspace". the name is stored in a file under the workspace folder called "name" (before itwInitialize() is called).

to allow more users to join the workspace, the user opens the configuration window (see below). one of the tabs is "participants".
it shows them a list of users allowed to access this workspace, and users that are actually using this workspace.
they can remove users from this list, if they are not using the workspace. if they are using it, the user will have
to delete the workspace from their computer, and then you can remove the workspace from the list of allowed users.
if the user is causing harm to your workspace, you should send an email to webmaster@trivergia.com
anyway, the user can add users to the list. in the future, they will be able to send an invite to the user
which sends the user a message, with the id of the workspace and the name included. 

to configure the workspace, you right-click on it in the launchbar and choose configure.
you then get a window with a tabbed pane in it. there is a tab called general which allows you to rename the workspace,
and maybe a few other basic things. if you are the creator of the workspace, there is a tab called users
which allows you to choose which users are allowed in the workspace. i think i mentioned above how
to do that. there is also one tab for each custom component returned from the config method in Workspace.
i can't remember what the name of the method is, but it returns a Map<String,JComponent> so it should
be fairly easy to find.

i may have already mentioned this (if i did, then this supersedes what i've already mentioned), but users who have imported
a workspace may delete it from their computer only. the creator of the workspace may not delete it unless there are no
allowed members in the list. this means that all participants must delete the workspace off of their computers first.

if the user chooses to create a new workspace, they are prompted for the type of workspace they wish to create, and the
name they want to give to the workspace. once they click OK or Finish or whatever, it then follows the steps outlined
in importing a workspace for creating a folder structure, but there is 1 additional file.
it is allowedUsers. it contains the list of users allowed to use the workspace,
separated by pipes. it then informs the user that they have successfully created
a workspace, and that they can now configure it to choose who can access it.

there is a folder called plugins. this is kind of a misnomer because as of this writing it doesn't contain the plugins, only
their configuration files. plugin code gets put into an as yet undefined folder that is on the classpath when a plugin is installed.
anyway, the plugins folder contains one file per plugin, with the file's name being the plugin's registered type. for official
types, contact webmaster@trivergia.com to register an official type. if you are just creating your own test plugin, you sould prefix
it's type with unregistered_ because that is guaranteed to not be on the beginning of any registered types. also, registered types shouldn't
start with i_ except for internal plugins. plugins such as the standard workspace plugin, the file sharing workspace plugin,
or some of the built in tools would start with i_. anyway, the content of the plugin file is a properties file. in it, it has a property
called type which is the type of plugin. this is different from the registered type. the registered type is a unique identifier
of the plugin, the type property is either workspace or tool. actually, it can be a few others, but those are the main ones.
there is a property called class who's value is the plugin class. for workspace plugins, this class should extend
net.sf.convergia.client.workspace.Workspace, and tool plugins should extend net.sf.convergia.client.workspace.WorkspaceTool .
for workspaces, there should be a property called importMessage (in that case, the M must be capitalized) which is the
message to display to the user after the user finishes importing this workspace, in a format suitable for passing
to a JLabel. this means that it could start with <html> and then have rich formatting. there is a property called setupMessage
which is the message to display after the workspace has been successfully created. there is a property called
name which is the name of this workspace type, for example "File-sharing workspace" or "Tool workspace".
this is the end of workspace-specific properties. for all types, both tool and workspace, there is property called version
which should be some sort of version string. this will be passed into the implementation of Workspace. it can then compare this with
the version declared on all other computers and see if it is willing to run this workspace.

plugins, outside of the system, are stored as zip files, with 2 files and 1 folder. the file that is not named
description is the config file, and is named
the plugin's registered type. the folder contains the java class files, that should be put on to the classpath.
this folder can be named anything, because there are no other folder to distinguish from. by
convention, the folder is named "classes".
there is another file called description which is a description of the plugin that should be presented to the
user when installing the plugin. anyway, this zip file is in the zip format but has an extention of it3pc. for example,
it could be named mytestplugin.it3pc and this extention should be registered to InTouch 3. this means that when you double-click
on an it3pc file and you have InTouch 3 installed, it will open an installer wizard for installing this plugin. if the plugin
already exists (based on it's registered type), it will tell you that you already have the plugin installed, and do you want
to overwrite? if you choose yes, the plugin is installed. if InTouch 3 is running, it will then inform you that you need to restart
InTouch 3 for the plugin to work (plugins are loaded when InTouch 3 is started, so InTouch 3 won't recognize the
plugin until you restart). 

when a message is sent from a workspace, the content of the message is the workspace's id, a pipe, and the message itself.
recipients of workspace-addressed messages should check to make sure that the sender is on the allowed user list for the workspace.

workspaces should wait at least 45 seconds before sending messages after being imported, because InTouch 3 may cache the list of allowed
users on the remote computer for up to 30 seconds.

































