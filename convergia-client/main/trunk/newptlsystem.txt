This document describes a new plugin finding system that could be created.

instead of viewing an html page like the old plugin system does, the new plugin system
could have a concept of update sites that it maintains. it would come with a built-in
update site called Convergia Plugin Site or something like that. an update site would
have a name (2 options to consider: the user can specify it or it's fixed in the update
site file) and it has a url, which points to an xml file. the xml file contains a
site tag as it's root, with an attribute called name, and additional attributes for vendor,
etc. TODO: work on what these attributes are. anyway, this tag can contain any number
of group tags and plugin tags. each group tag conatins a name attribute. each plugin tag
has an attribute called url which is the url to a .cvgp file for that plugin. the .cvgp
files referenced by an update site are required to not use inline jar urls. 

a sample update site file could be:

<site name="Convergia Plugin Site">
    <group name="Look and Feels">
        <plugin url="http://trivergia.com:8080/lookandfeel1.cvgp"/>
        <plugin url="http://trivergia.com:8080/lookandfeel2.cvgp"/>
        <group name="Look and Feels on SourceForge">
            <plugin url="http://trivergia.com:8080/lookandfeel3.cvgp"/>
        </group>                                                                                                                                                                              
    </group>
    <group name="Tools">
        <plugin url="http://trivergia.com:8080/tool1.cvgp"/>
        <plugin url="http://trivergia.com:8080/tool2.cvgp"/>
    </group>
</site>

a .cvgp file contains an additional property called dependencies which is a pipe-separated
list of urls which are other .cvgp files. plugins are stored within the convergia system
as inline jar urls. all plugins are loaded with the same class loader, so it's best
to package used libraries as plugins and check to make sure that someone else hasn't
already packaged them this way. TODO: figure out something else to do so that not
all plugins are loaded with the same class loader.

if convergia detects that 2 plugins with the same id are installed (the id of a plugin
is the plugin's file name), it will warn the user that the plugin appears to already
be installed, and ask them whether they want to re-install it or proceed without
doing anything.

plugins can also have a property called license which is a license agreement that
will be presented to the user before they can install the plugin.

the file extention .cvgp will be registered to the operating system upon installing,
and when the user opens a .cvgp file convergia asks them if they want to install
the plugin, optionally prompting them for the license agreement if one exists.
the idea is that the code used to install plugins and prompt the user for the
license agreements and space requirements can be reused for both online plugins
and local plugins. an installer will be written that can take multiple external
.cvgp files and install them, asking the user about any necessary information.
when a user opens a .cvgp file in their operating system, this would simply call
the same code that is used when a user downloads plugins to inst all, except that
there would be just one plugin instead of multiple plugins as would be typical
when downloading and installing from the internet.

updates for plugins would be checked for frequently by contacting the url specified
in the plugin's .cvgp file if present, or the url that the plugin was initially
downloaded from if it was installed from an update site. if the plugin is a locally
installed plugin and it specifies no update site url, the user will be warned
before they install the plugin that convergia will not check for updates for this
plugin because it doesn't know where to check for updates.

some sort of signing feature should be implemented in the future. a plugin could
somehow by signed to tell convergia clients that the plugin has been authorized.

