

=========================
:mod:`fileutils.ssh` --- 
=========================

.. module:: fileutils.ssh
   :synopsis: 



-------------
Class SSHFile
-------------

A concrete file implementation allowing file operations to be carried
out on a remote host via SSH and SFTP.

Instances of SSHFile can be constructed around an instance of
paramiko.SFTPClient by doing::

    f = SSHFile(sftp_client)

They can also be obtained from :obj:`~SSHFile.connect_with_password`.

SSHFile instances are reentrant context managers that close their
underlying SFTPClient's transport on exit. This in combination with
connect_with_password allows the following pattern to be used to
properly clean things up after manipulating remote files::

    with SSHFile.connect_with_password(...) as f:
        ...do stuff with f...
        with f: # SSHFiles are reentrant, so this works fine
            ...do more stuff with f...
        ...do even more stuff with f...

*Method resolution order:* :obj:`~fileutils.interface.ReadWrite`, :obj:`~fileutils.mixins.ChildrenMixin`, :obj:`~fileutils.interface.Listable`, :obj:`~fileutils.interface.Readable`, :obj:`~fileutils.interface.Hierarchy`, :obj:`~fileutils.interface.Writable`

.. class:: SSHFile(self, client, client_name=None, path='/')



   .. method:: __enter__(self)



   .. method:: __exit__(self, *args)



   .. method:: __str__(self)
               __repr__(self)



   .. method:: child(self, *names)



      |  *Overrides* :obj:`~fileutils.interface.Hierarchy.child` *in class* :obj:`~fileutils.interface.Hierarchy`

   .. attribute:: child_names



      |  *Overrides* :obj:`~fileutils.interface.Listable.child_names` *in class* :obj:`~fileutils.interface.Listable`

   .. method:: create_folder(self, ignore_existing=False, recursive=False)



      |  *Overrides* :obj:`~fileutils.interface.Writable.create_folder` *in class* :obj:`~fileutils.interface.Writable`

   .. method:: delete(self, ignore_missing=False)



      |  *Overrides* :obj:`~fileutils.interface.Writable.delete` *in class* :obj:`~fileutils.interface.Writable`

   .. method:: disconnect(self)



   .. method:: get_path_components(self, relative_to=None)



      |  *Overrides* :obj:`~fileutils.interface.Hierarchy.get_path_components` *in class* :obj:`~fileutils.interface.Hierarchy`

   .. attribute:: link_target



      |  *Overrides* :obj:`~fileutils.interface.Readable.link_target` *in class* :obj:`~fileutils.interface.Readable`

   .. method:: link_to(self, other)



      |  *Overrides* :obj:`~fileutils.interface.Writable.link_to` *in class* :obj:`~fileutils.interface.Writable`

   .. method:: open_for_reading(self)



      |  *Overrides* :obj:`~fileutils.interface.Readable.open_for_reading` *in class* :obj:`~fileutils.interface.Readable`

   .. method:: open_for_writing(self, append=False)



      |  *Overrides* :obj:`~fileutils.interface.Writable.open_for_writing` *in class* :obj:`~fileutils.interface.Writable`

   .. attribute:: parent



      |  *Overrides* :obj:`~fileutils.interface.Hierarchy.parent` *in class* :obj:`~fileutils.interface.Hierarchy`

   .. method:: rename_to(self, other)



      |  *Overrides* :obj:`~fileutils.interface.ReadWrite.rename_to` *in class* :obj:`~fileutils.interface.ReadWrite`

   .. attribute:: type



      |  *Overrides* :obj:`~fileutils.interface.Readable.type` *in class* :obj:`~fileutils.interface.Readable`

   *Members inherited from class* :obj:`~fileutils.interface.ReadWrite`\ *:* :obj:`~fileutils.interface.ReadWrite.__metaclass__`

   *Members inherited from class* :obj:`~fileutils.mixins.ChildrenMixin`\ *:* :obj:`~fileutils.mixins.ChildrenMixin.children`

   *Members inherited from class* :obj:`~fileutils.interface.Listable`\ *:* :obj:`~fileutils.interface.Listable.recurse`

   *Members inherited from class* :obj:`~fileutils.interface.Readable`\ *:* :obj:`~fileutils.interface.Readable.check_file`, :obj:`~fileutils.interface.Readable.check_folder`, :obj:`~fileutils.interface.Readable.copy_into`, :obj:`~fileutils.interface.Readable.copy_to`, :obj:`~fileutils.interface.Readable.dereference`, :obj:`~fileutils.interface.Readable.exists`, :obj:`~fileutils.interface.Readable.hash`, :obj:`~fileutils.interface.Readable.is_broken`, :obj:`~fileutils.interface.Readable.is_directory`, :obj:`~fileutils.interface.Readable.is_file`, :obj:`~fileutils.interface.Readable.is_folder`, :obj:`~fileutils.interface.Readable.is_link`, :obj:`~fileutils.interface.Readable.read`, :obj:`~fileutils.interface.Readable.read_blocks`, :obj:`~fileutils.interface.Readable.size`, :obj:`~fileutils.interface.Readable.valid`

   *Members inherited from class* :obj:`~fileutils.interface.Hierarchy`\ *:* :obj:`~fileutils.interface.Hierarchy.__div__`, :obj:`~fileutils.interface.Hierarchy.ancestor_of`, :obj:`~fileutils.interface.Hierarchy.ancestors`, :obj:`~fileutils.interface.Hierarchy.descendant_of`, :obj:`~fileutils.interface.Hierarchy.get_ancestors`, :obj:`~fileutils.interface.Hierarchy.get_path`, :obj:`~fileutils.interface.Hierarchy.name`, :obj:`~fileutils.interface.Hierarchy.path`, :obj:`~fileutils.interface.Hierarchy.path_components`, :obj:`~fileutils.interface.Hierarchy.safe_child`, :obj:`~fileutils.interface.Hierarchy.same_as`, :obj:`~fileutils.interface.Hierarchy.sibling`

   *Members inherited from class* :obj:`~fileutils.interface.Writable`\ *:* :obj:`~fileutils.interface.Writable.append`, :obj:`~fileutils.interface.Writable.makedirs`, :obj:`~fileutils.interface.Writable.mkdir`, :obj:`~fileutils.interface.Writable.mkdirs`, :obj:`~fileutils.interface.Writable.write`

---------
Functions
---------



.. function:: ssh_connect(host, username)

