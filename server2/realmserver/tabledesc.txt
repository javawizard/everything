This document describes all of the tables that the realm server uses in it's database.


These tables reside in the persistant database:


webusers:

This table contains the users that can manage this realm server from the web. This is entirely unrelated to the OpenGroove users registered to this realm server.

username varchar(64) The user's username
role varchar(32) The role of this user. Currently only admin is allowed.
password varchar(200) The hex representation of the SHA-512 of the password for this user



configuration:

This table holds general configuration of the server, such as whether or not registration is open, This server's name and description in the OpenGroove realm server directory, etc.

name varchar(64) The name of this configuration setting
value varchar(1024) The value of this configuration setting



users:

This table holds the users that are signed up with this realm server.

username varchar(64) The username of this user.
password varchar(200) The hex representation of the SHA-512 of the password for this user. It should only need to be 128 chars long but it's longer just in case.



usersettings:

This table holds settings that a user specifies. A user can set settings for their account to allow multiple computers to be able to download this information. Settings who's name start with public- can be viewed (but not edited) by anyone, and all other settings can only be viewed and edited by the user themselves. A user cannot have more than 256KB of settings (this does not include individual computer settings) This includes a 64-byte overhead for each setting, the length of the key, and the length of the value.

username varchar(64) The username of the user that this setting is for
name varchar(64) The name of this particular setting
value varchar(2048) The value of this setting



computersettings:

This table holds settings similar to usersettings, but the settings are computer-specific. When a setting is created, the computer that created it is marked as the owner of the setting. Any other computer of that user can modify the setting if it knows the name of the computer. Setting names of this type do not need to be unique across all of the user's settings. A computer can only have 16KB of settings, using the same spec as the usersettings table. A user is only able to create 8 computers by default; this can be configured using the web ui.

username varchar(64) The username of the user that owns the computer that the setting is for
computername varchar(64) The name of the computer that created this setting
name varchar(64) The name of this setting
value varchar(2048) The value of this setting



computers:

This table holds the computers that are registered for each user.

username varchar(64) The username of the user that this computer is registered to
computername varchar(64) The name of this computer
type varchar(32) The type of computer. When a computer is created, it's type is specified, and it's type cannot change thereafter. Currently, the valid types are pc, pda, and mobile.



These tables reside in the large database:


storedmessages:

This table holds the list of stored messages that are queued on this realm server right now. It doesn't actually contain the message data (except for the message's metadata, which is limited to 1024 characters total), which is stored in the large database table storedmessagedata.

id varchar(128) The id of the message. It's recommended that this start with the userid of the sender of the message, to avoid message id collisions.
sender varchar(64) The username (or userid if the message is from a user not on this realm server) of the message's sender.
recipient varchar(64) The username (or userid if the message is from a user not on this realm server) of the message's intended recipient.
fromcomputer varchar(64)  The name of the computer that sent this message, the empty string if unavailable
tocomputer varchar(64) The name of the computer that the message is intended for, the empty string to indicate that it's for all computers of the user specified. If a target computer is specified, all computers of that user will still have access to the message, but they can see that the message is not directly intended for them, and the message will be deleted if the intended computer soft-deletes it instead of requiring all online computers of that user to soft-delete it.
hasdata boolean True if this message has any data, false otherwise. This is used because the large database (where message contents are stored) is volatile, so the server needs some way of distinguishing
finalized boolean True if the message is finalized, false if it is not. If the sender is a user from a different realm server, then this should always be true. If a message is finalized, this means that the complete contents of the message have been uploaded and the message is ready to be sent off on it's way, or, if the recipient is on this realm server, that the message has been downloaded from the sending realm server and is available for download.
accessed boolean True if the recipient of the message has accessed it at least once, usually indicating that it's trying to receive it.
metadata varchar(1192) the metadata of the message, in the format of Properties.store(). The metadata itself should be restricted to 1024B, but java adds a bunch of comments and stuff into the properties file format so the extra space (1192 bytes) is to allow for that.



softdeletes

This table stores when a computer soft-deletes a particular message.

id varchar(128) the id of the message, from which, using the stored messages table, the username can be derived
computer varchar(64) the name of the computer that has soft-deleted this message



storedmessagedata:

This table holds the actual contents of stored messages.

id varchar(128) The id of the message that this data is for.
block int The block number of this particular data chunk. Usually, block numbering starts at 0, and increments by one for each successive block. However, this is not required. The blocks of the message are assembled in ascending order, but that is the only constraint on block numbering.
contents blob The actual contents of this block. The contents should be no larger than 64KB.















