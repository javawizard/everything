I'm going to be reworking fileutils to provide an abstract API for manipulating file-ish things, and then there'll be several different implementations, one being a local implementation like fileutils currently is, and others being a URL implementation, an implementation able to modify things on a remote machine via ssh and sftp (which will most likely use paramiko), and implementations sitting on top of SMB and FTP.

So, I'll be splitting up File's methods into several different abstract classes, each of which providing a bit of functionality. The various implementations need not implement all of the abstract classes; URL, for example, won't implement the class permitting listing of a directory's contents, although a future DAVURL subclass would.

I'm not going to worry about things like URL authentication for now (this is particularly hard because URLs can link, via redirects, to URLs on other hosts, so this really needs to be thought out). They'll come later.

So, some classes, and the functions they contain:

    File
        ancestor_of (uses ancestors and ==)
        ancestors (uses get_ancestors)
        child
        descendent_of (uses ancestor_of)
        get_ancestors (uses parent)
        get_path (uses get_path_components)
        get_path_components
        name (could be implemented to use get_path_components, unsure if I want to provide a default implementation yet)
        parent
        path (uses get_path)
        path_components (uses get_path_components)
        safe_child (uses child and ancestor_of)
        sibling (uses parent and child)
    ExtendedAttributes
        check_xattr (uses has_xattr)
        delete_xattr
        get_xattr
        has_xattr (could possibly use get_xattr)
        list_xattrs
        set_xattr
    Listable
        child_names (uses children; I expect most instances would want to override this)
        children (uses child_names and child; not sure which of children and child_names I'm going to provide a default implementation for)
        glob (unsure how I'm going to do this yet, but would probably use children and name)
        recurse (uses children and, of course, child.recurse)
    Readable
        check_file (uses is_file)
        check_folder (uses is_folder)
        copy_into (uses copy_to, name, and other.child)
        copy_to (unsure; implementation for Readable would use read_blocks, but implementation for Listable would be different)
        dereference (uses link_target)
        exists
        hash (uses read_blocks)
        is_broken
        is_directory
        is_file
        is_folder (uses is_directory)
        is_link (uses link_target)
        link_target
        open_for_reading
        read (uses read_blocks)
        read_blocks (uses open_for_reading)
        valid (uses exists, is_link, and is_broken)
    Sizable
        size
    WorkingDirectory
        as_working (uses change_to and some function for getting the current working directory, probably an abstract staticmethod of some sort)
        change_to/cd
    Writable
        append (uses open_for_writing(append=True))
        create_folder
        delete (might provide a default implementation for Listable in terms of delete_just_this_thing, but see if paramiko etc provide built-in recursive deletion)
        link_to
        open_for_writing
        write (uses open_for_writing)

Uncategorized:
    delete_on_exit
    open_for_random_access
    rename_to


I'm skipping delete_on_exit for now; I'll categorize that later, but I'm pretty sure I'll start out with only local files implementing that.

I'm also rather conflicted on open_for_reading and open_for_writing as they'd preclude using any of the other file modes Python provides... I might just provide open() for local files only and open_for_reading and open_for_writing for everything.

rename_to is complicated in terms of what, if anything, it should require or inherit from. A pure abstract class providing rename_to wouldn't need to inherit from anything, but a directory-aware default implementation would require Readable (to read the file's contents if it's a file), Listable (to rename the file's children if it's a directory), and Writable (to delete the file after copying it to its new destination). I think I might just leave it as its own pure abstract class without a default implementation for now. (I'm also pretty sure I'd want to provide a per-subclass implementation anyway to use the relevant platform's built-in rename function, which would get us proper rename atomicity on platforms that support it.)

So, now I think I'm going to go fill in the above list with which functions have default implementations and which other functions they're implemented in terms of.




















