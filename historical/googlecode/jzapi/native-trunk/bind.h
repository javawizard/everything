#include "testplugin.h"

jobject JNICALL cb_PlayerUpdateState_getStatus(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setStatus(JNIEnv *env, jobject self, jobject status);
jboolean JNICALL cb_PlayerUpdateState_getFalling(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setFalling(JNIEnv *env, jobject self, jboolean falling);
jboolean JNICALL cb_PlayerUpdateState_getCrossingWall(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setCrossingWall(JNIEnv *env, jobject self, jboolean crossingWall);
jboolean JNICALL cb_PlayerUpdateState_getInPhantomZone(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setInPhantomZone(JNIEnv *env, jobject self, jboolean inPhantomZone);
jfloatArray JNICALL cb_PlayerUpdateState_getPos(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setPos(JNIEnv *env, jobject self, jfloatArray pos);
jfloatArray JNICALL cb_PlayerUpdateState_getVelocity(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setVelocity(JNIEnv *env, jobject self, jfloatArray velocity);
jfloat JNICALL cb_PlayerUpdateState_getRotation(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setRotation(JNIEnv *env, jobject self, jfloat rotation);
jfloat JNICALL cb_PlayerUpdateState_getAngVel(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setAngVel(JNIEnv *env, jobject self, jfloat angVel);
jint JNICALL cb_PlayerUpdateState_getPhydrv(JNIEnv *env, jobject self);
void JNICALL cb_PlayerUpdateState_setPhydrv(JNIEnv *env, jobject self, jint phydrv);

jint JNICALL cb_BasePlayerRecord_getVersion(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setVersion(JNIEnv *env, jobject self, jint version);
jint JNICALL cb_BasePlayerRecord_getPlayerID(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setPlayerID(JNIEnv *env, jobject self, jint playerID);
jstring JNICALL cb_BasePlayerRecord_getCallsign(JNIEnv *env, jobject self);
jobject JNICALL cb_BasePlayerRecord_getTeam(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setTeam(JNIEnv *env, jobject self, jobject team);
jstring JNICALL cb_BasePlayerRecord_getIpAddress(JNIEnv *env, jobject self);
jint JNICALL cb_BasePlayerRecord_getCurrentFlagID(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setCurrentFlagID(JNIEnv *env, jobject self, jint currentFlagID);
jstring JNICALL cb_BasePlayerRecord_getCurrentFlag(JNIEnv *env, jobject self);
jobjectArray JNICALL cb_BasePlayerRecord_getFlagHistory(JNIEnv *env, jobject self);
jfloat JNICALL cb_BasePlayerRecord_getLastUpdateTime(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setLastUpdateTime(JNIEnv *env, jobject self, jfloat lastUpdateTime);
jstring JNICALL cb_BasePlayerRecord_getClientVersion(JNIEnv *env, jobject self);
jboolean JNICALL cb_BasePlayerRecord_getSpawned(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setSpawned(JNIEnv *env, jobject self, jboolean spawned);
jboolean JNICALL cb_BasePlayerRecord_getVerified(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setVerified(JNIEnv *env, jobject self, jboolean verified);
jboolean JNICALL cb_BasePlayerRecord_getGlobalUser(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setGlobalUser(JNIEnv *env, jobject self, jboolean globalUser);
jstring JNICALL cb_BasePlayerRecord_getBzID(JNIEnv *env, jobject self);
jboolean JNICALL cb_BasePlayerRecord_getAdmin(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setAdmin(JNIEnv *env, jobject self, jboolean admin);
jboolean JNICALL cb_BasePlayerRecord_getOp(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setOp(JNIEnv *env, jobject self, jboolean op);
jboolean JNICALL cb_BasePlayerRecord_getCanSpawn(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setCanSpawn(JNIEnv *env, jobject self, jboolean canSpawn);
jobjectArray JNICALL cb_BasePlayerRecord_getGroups(JNIEnv *env, jobject self);
jint JNICALL cb_BasePlayerRecord_getLag(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setLag(JNIEnv *env, jobject self, jint lag);
jint JNICALL cb_BasePlayerRecord_getJitter(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setJitter(JNIEnv *env, jobject self, jint jitter);
jfloat JNICALL cb_BasePlayerRecord_getPacketLoss(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setPacketLoss(JNIEnv *env, jobject self, jfloat packetLoss);
jfloat JNICALL cb_BasePlayerRecord_getRank(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setRank(JNIEnv *env, jobject self, jfloat rank);
jint JNICALL cb_BasePlayerRecord_getWins(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setWins(JNIEnv *env, jobject self, jint wins);
jint JNICALL cb_BasePlayerRecord_getLosses(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setLosses(JNIEnv *env, jobject self, jint losses);
jint JNICALL cb_BasePlayerRecord_getTeamKills(JNIEnv *env, jobject self);
void JNICALL cb_BasePlayerRecord_setTeamKills(JNIEnv *env, jobject self, jint teamKills);
